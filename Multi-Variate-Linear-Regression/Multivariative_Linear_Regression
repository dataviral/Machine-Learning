import numpy as np
from numpy import genfromtxt
from statistics import stdev
import matplotlib.pyplot as plt
from math import fabs

class MultiVariate():
    def __init__(self, features, values) :
        self.features = features
        self.values = values
        
    def scale_features(self):
        for i in range(self.features.shape[1]):
            mean = self.features[:,i].sum() / self.features.shape[0]
            s =  stdev(self.features[:,i])
            for j in range(self.features.shape[0]):
                self.features[j,i] = (self.features[j,i] - mean) / s

    def train(self,alpha,n1,n2):
        n2 = self.features.shape[0] - n2
        self.scale_features()
        self.features_train = features[:n1,:]
        self.features_test = features[n2:,:]
        self.values_train = values[:n1,:] 
        self.values_test = values[n2:, :]
        
        self.features_train = np.concatenate((np.ones((self.features_train.shape[0], 1)), self.features_train), axis=1)
        self.features_test = np.concatenate((np.ones((self.features_test.shape[0], 1)), self.features_test), axis=1)

        self.theta = np.zeros((self.features_train.shape[1],1))
        m = self.features_train.shape[0]
        for i in range(self.features_train.shape[0]):
            row = self.features_train[i,:]
            h = np.dot(self.features_train, self.theta)
            for j in range(len(self.theta)):
                self.theta[j] = self.theta[j] - ( alpha * (1/m) * sum(h -self.values_train) * row[j])
            if(fabs(sum(h-self.values_train)) < 0.0001):
                break
    
    def plot(self,f):
        
        r = np.dot(self.features_test, self.theta)

        slope, intercept = np.polyfit(self.features_test[:,f],r, 1)
        abline_values = [slope * i + intercept for i in self.features_test[:,f] ]

        plt.close()
        plt.scatter(self.features_test[:,f],self.values_test)
        plt.plot(self.features_test[:,f], abline_values,color='r')
        plt.show()

# exapmle code

#generating numpy array from tsv file
data = genfromtxt('linear_regression.txt', delimiter=",")

# separating features and actual values
features, values = data[:,:-1], data[:,-1:]

clf = MultiVariate(features, values)
clf.train(1.35,47,10) # learning rate, no of training features, no of testing features
clf.plot(1)


